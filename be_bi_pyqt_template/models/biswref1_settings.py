##########################################################################
#
#  DO NOT MODIFY!!!
#  This file is generated by the accjapc 0.2.1
#
##########################################################################

from typing import cast, Union, Dict, Any, Tuple
from PyQt5.QtCore import pyqtSignal, QObject
from numpy import ndarray
from pyjapc import PyJapc
from accjapc import DevicePropertyData, ControlEndpointAddress


_Header = Dict[str, Any]


class SettingsDeviceProperty(QObject):

    value_updated = pyqtSignal(dict, dict)
    thresholds_updated = pyqtSignal(ndarray, dict)
    flag_updated = pyqtSignal(bool, dict)
    shapes_updated = pyqtSignal(ndarray, dict)
    reg_16_updated = pyqtSignal(int, dict)
    shapes2_d_arr_updated = pyqtSignal(ndarray, dict)
    acquisition_shape_updated = pyqtSignal(int, dict)
    reg_32_updated = pyqtSignal(int, dict)
    frequency_updated = pyqtSignal(int, dict)
    thresholds2_d_updated = pyqtSignal(ndarray, dict)
    
    def __init__(self, japc: PyJapc, addr: Union[str, ControlEndpointAddress], selector: str = ''):
        """
        Generated binding for `Settings` property.

        Args:
            japc: Reference to the PyJapc handle.
            addr: Full device address.
            selector: Optional cycle selector.
        """
        super().__init__()
        self._selector = selector
        self._japc = japc
        if isinstance(addr, ControlEndpointAddress):
            addr.field = None
        self._full_addr = str(addr)

    @property
    def selector(self) -> str:
        """Cycle selector that is used to retrieve the values."""
        return self._selector

    def subscribe(self, start_monitoring: bool = True):
        """
        Subscribe to monitor the property.

        Args:
            start_monitoring: When True, the PyJapc will turn the monitoring on immediately.
        """

        self._japc.subscribeParam(parameterName=self._full_addr,
                                  onValueReceived=self._notify,
                                  getHeader=True,
                                  timingSelectorOverride=self._selector)
        if start_monitoring:
            self._japc.startSubscriptions(parameterName=self._full_addr, selector=self._selector)

    def _notify(self, _, value: DevicePropertyData, headerInfo: _Header):
        self.value_updated.emit(value, headerInfo)
        self.thresholds_updated.emit(value['thresholds'], headerInfo)
        self.flag_updated.emit(value['flag'], headerInfo)
        self.shapes_updated.emit(value['shapes'], headerInfo)
        self.reg_16_updated.emit(value['reg_16'], headerInfo)
        self.shapes2_d_arr_updated.emit(value['shapes2DArr'], headerInfo)
        self.acquisition_shape_updated.emit(value['acquisitionShape'], headerInfo)
        self.reg_32_updated.emit(value['reg_32'], headerInfo)
        self.frequency_updated.emit(value['frequency'], headerInfo)
        self.thresholds2_d_updated.emit(value['thresholds2D'], headerInfo)
        
    def _get_value(self, with_header: bool = False) -> Union[DevicePropertyData, Tuple[DevicePropertyData, _Header]]:
        """The full value of the property (all fields included)."""
        return self._japc.getParam(parameterName=self._full_addr,
                                   getHeader=with_header,
                                   timingSelectorOverride=self._selector)

    def set_value(self, new_val: DevicePropertyData):
        self._japc.setParam(parameterName=self._full_addr,
                            parameterValue=new_val,
                            timingSelectorOverride=self._selector,
                            checkDims=False)

    value = property(fget=_get_value, fset=set_value)
    """The full value of the property (all fields included)."""

    @property
    def value_with_header(self) -> Tuple[DevicePropertyData, _Header]:
        """The full value of the property (all fields included) with the header, which comes
        directly from PyJAPC, e.g.

        >>> {
        >>>     'acqStamp': datetime.datetime(2016, 3, 11, 13, 10, 25, 515000, tzinfo=<UTC>),
        >>>     'cycleStamp': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=<UTC>),
        >>>     'isFirstUpdate': 0,
        >>>     'isImmediateUpdate': 0,
        >>> }

        Returns:
            Tuple of the value dictionary and the header.
        """
        return cast(Tuple[DevicePropertyData, _Header], self._get_value(with_header=True))

    def _get_thresholds(self) -> ndarray:
        """Property field: `Settings#thresholds`."""
        return cast(ndarray, self.value['thresholds'])

    def set_thresholds(self, new_val: ndarray):
        self.value = {
            'thresholds': new_val,
        }

    thresholds = property(fget=_get_thresholds, fset=set_thresholds)

    @property
    def thresholds_with_header(self) -> Tuple[ndarray, _Header]:
        """
        Retrieves property field `Settings#thresholds` with the header, which comes
        directly from PyJAPC, e.g.

        >>> {
        >>>     'acqStamp': datetime.datetime(2016, 3, 11, 13, 10, 25, 515000, tzinfo=<UTC>),
        >>>     'cycleStamp': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=<UTC>),
        >>>     'isFirstUpdate': 0,
        >>>     'isImmediateUpdate': 0,
        >>> }

        Returns:
            Tuple of the value and the header.
        """
        val, header = cast(Tuple[DevicePropertyData, _Header], self._get_value(with_header=True))
        return cast(ndarray, val['thresholds']), header

    def _get_flag(self) -> bool:
        """Property field: `Settings#flag`."""
        return cast(bool, self.value['flag'])

    def set_flag(self, new_val: bool):
        self.value = {
            'flag': new_val,
        }

    flag = property(fget=_get_flag, fset=set_flag)

    @property
    def flag_with_header(self) -> Tuple[bool, _Header]:
        """
        Retrieves property field `Settings#flag` with the header, which comes
        directly from PyJAPC, e.g.

        >>> {
        >>>     'acqStamp': datetime.datetime(2016, 3, 11, 13, 10, 25, 515000, tzinfo=<UTC>),
        >>>     'cycleStamp': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=<UTC>),
        >>>     'isFirstUpdate': 0,
        >>>     'isImmediateUpdate': 0,
        >>> }

        Returns:
            Tuple of the value and the header.
        """
        val, header = cast(Tuple[DevicePropertyData, _Header], self._get_value(with_header=True))
        return cast(bool, val['flag']), header

    def _get_shapes(self) -> ndarray:
        """Property field: `Settings#shapes`."""
        return cast(ndarray, self.value['shapes'])

    def set_shapes(self, new_val: ndarray):
        self.value = {
            'shapes': new_val,
        }

    shapes = property(fget=_get_shapes, fset=set_shapes)

    @property
    def shapes_with_header(self) -> Tuple[ndarray, _Header]:
        """
        Retrieves property field `Settings#shapes` with the header, which comes
        directly from PyJAPC, e.g.

        >>> {
        >>>     'acqStamp': datetime.datetime(2016, 3, 11, 13, 10, 25, 515000, tzinfo=<UTC>),
        >>>     'cycleStamp': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=<UTC>),
        >>>     'isFirstUpdate': 0,
        >>>     'isImmediateUpdate': 0,
        >>> }

        Returns:
            Tuple of the value and the header.
        """
        val, header = cast(Tuple[DevicePropertyData, _Header], self._get_value(with_header=True))
        return cast(ndarray, val['shapes']), header

    def _get_reg_16(self) -> int:
        """Property field: `Settings#reg_16`."""
        return cast(int, self.value['reg_16'])

    def set_reg_16(self, new_val: int):
        self.value = {
            'reg_16': new_val,
        }

    reg_16 = property(fget=_get_reg_16, fset=set_reg_16)

    @property
    def reg_16_with_header(self) -> Tuple[int, _Header]:
        """
        Retrieves property field `Settings#reg_16` with the header, which comes
        directly from PyJAPC, e.g.

        >>> {
        >>>     'acqStamp': datetime.datetime(2016, 3, 11, 13, 10, 25, 515000, tzinfo=<UTC>),
        >>>     'cycleStamp': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=<UTC>),
        >>>     'isFirstUpdate': 0,
        >>>     'isImmediateUpdate': 0,
        >>> }

        Returns:
            Tuple of the value and the header.
        """
        val, header = cast(Tuple[DevicePropertyData, _Header], self._get_value(with_header=True))
        return cast(int, val['reg_16']), header

    def _get_shapes2_d_arr(self) -> ndarray:
        """Property field: `Settings#shapes2DArr`."""
        return cast(ndarray, self.value['shapes2DArr'])

    def set_shapes2_d_arr(self, new_val: ndarray):
        self.value = {
            'shapes2DArr': new_val,
        }

    shapes2_d_arr = property(fget=_get_shapes2_d_arr, fset=set_shapes2_d_arr)

    @property
    def shapes2_d_arr_with_header(self) -> Tuple[ndarray, _Header]:
        """
        Retrieves property field `Settings#shapes2DArr` with the header, which comes
        directly from PyJAPC, e.g.

        >>> {
        >>>     'acqStamp': datetime.datetime(2016, 3, 11, 13, 10, 25, 515000, tzinfo=<UTC>),
        >>>     'cycleStamp': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=<UTC>),
        >>>     'isFirstUpdate': 0,
        >>>     'isImmediateUpdate': 0,
        >>> }

        Returns:
            Tuple of the value and the header.
        """
        val, header = cast(Tuple[DevicePropertyData, _Header], self._get_value(with_header=True))
        return cast(ndarray, val['shapes2DArr']), header

    def _get_acquisition_shape(self) -> int:
        """Property field: `Settings#acquisitionShape`."""
        return cast(int, self.value['acquisitionShape'])

    def set_acquisition_shape(self, new_val: int):
        self.value = {
            'acquisitionShape': new_val,
        }

    acquisition_shape = property(fget=_get_acquisition_shape, fset=set_acquisition_shape)

    @property
    def acquisition_shape_with_header(self) -> Tuple[int, _Header]:
        """
        Retrieves property field `Settings#acquisitionShape` with the header, which comes
        directly from PyJAPC, e.g.

        >>> {
        >>>     'acqStamp': datetime.datetime(2016, 3, 11, 13, 10, 25, 515000, tzinfo=<UTC>),
        >>>     'cycleStamp': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=<UTC>),
        >>>     'isFirstUpdate': 0,
        >>>     'isImmediateUpdate': 0,
        >>> }

        Returns:
            Tuple of the value and the header.
        """
        val, header = cast(Tuple[DevicePropertyData, _Header], self._get_value(with_header=True))
        return cast(int, val['acquisitionShape']), header

    def _get_reg_32(self) -> int:
        """Property field: `Settings#reg_32`."""
        return cast(int, self.value['reg_32'])

    def set_reg_32(self, new_val: int):
        self.value = {
            'reg_32': new_val,
        }

    reg_32 = property(fget=_get_reg_32, fset=set_reg_32)

    @property
    def reg_32_with_header(self) -> Tuple[int, _Header]:
        """
        Retrieves property field `Settings#reg_32` with the header, which comes
        directly from PyJAPC, e.g.

        >>> {
        >>>     'acqStamp': datetime.datetime(2016, 3, 11, 13, 10, 25, 515000, tzinfo=<UTC>),
        >>>     'cycleStamp': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=<UTC>),
        >>>     'isFirstUpdate': 0,
        >>>     'isImmediateUpdate': 0,
        >>> }

        Returns:
            Tuple of the value and the header.
        """
        val, header = cast(Tuple[DevicePropertyData, _Header], self._get_value(with_header=True))
        return cast(int, val['reg_32']), header

    def _get_frequency(self) -> int:
        """Property field: `Settings#frequency`."""
        return cast(int, self.value['frequency'])

    def set_frequency(self, new_val: int):
        self.value = {
            'frequency': new_val,
        }

    frequency = property(fget=_get_frequency, fset=set_frequency)

    @property
    def frequency_with_header(self) -> Tuple[int, _Header]:
        """
        Retrieves property field `Settings#frequency` with the header, which comes
        directly from PyJAPC, e.g.

        >>> {
        >>>     'acqStamp': datetime.datetime(2016, 3, 11, 13, 10, 25, 515000, tzinfo=<UTC>),
        >>>     'cycleStamp': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=<UTC>),
        >>>     'isFirstUpdate': 0,
        >>>     'isImmediateUpdate': 0,
        >>> }

        Returns:
            Tuple of the value and the header.
        """
        val, header = cast(Tuple[DevicePropertyData, _Header], self._get_value(with_header=True))
        return cast(int, val['frequency']), header

    def _get_thresholds2_d(self) -> ndarray:
        """Property field: `Settings#thresholds2D`."""
        return cast(ndarray, self.value['thresholds2D'])

    def set_thresholds2_d(self, new_val: ndarray):
        self.value = {
            'thresholds2D': new_val,
        }

    thresholds2_d = property(fget=_get_thresholds2_d, fset=set_thresholds2_d)

    @property
    def thresholds2_d_with_header(self) -> Tuple[ndarray, _Header]:
        """
        Retrieves property field `Settings#thresholds2D` with the header, which comes
        directly from PyJAPC, e.g.

        >>> {
        >>>     'acqStamp': datetime.datetime(2016, 3, 11, 13, 10, 25, 515000, tzinfo=<UTC>),
        >>>     'cycleStamp': datetime.datetime(1970, 1, 1, 0, 0, tzinfo=<UTC>),
        >>>     'isFirstUpdate': 0,
        >>>     'isImmediateUpdate': 0,
        >>> }

        Returns:
            Tuple of the value and the header.
        """
        val, header = cast(Tuple[DevicePropertyData, _Header], self._get_value(with_header=True))
        return cast(ndarray, val['thresholds2D']), header
